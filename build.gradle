plugins {
    id 'java'
}

version="1.0.0"

repositories {
    ivy {
        name = 'artifact'
        url gradle.artifactoryUrl()
        patternLayout {
            artifact "repo/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier])(.[ext])"
            artifact "github/[organisation]/releases/download/v[revision]/[artifact]-[revision](-[classifier])(.[ext])"
            m2compatible = true
        }
        credentials(HttpHeaderCredentials, gradle.artifactoryCredentials)
        authentication { header(HttpHeaderAuthentication) }
        metadataSources { artifact() }
        content {
            onlyForConfigurations('jFrogConfiguration')
        }
    }
    maven {
        name = 'maven'
        url gradle.artifactoryUrl('repo')
        credentials(HttpHeaderCredentials, gradle.artifactoryCredentials)
        authentication { header(HttpHeaderAuthentication) }
        metadataSources {
            mavenPom()
            artifact()
        }
        content {
            notForConfigurations('jFrogConfiguration')
        }
    }
}

dependencies {
    implementation "io.javaoperatorsdk:operator-framework:${javaOperatorVersion}"
    implementation "io.fabric8:kubernetes-client:${fabric8Version}"
    implementation "io.fabric8:crd-generator-apt:${fabric8Version}"
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${orgApacheLoggingLog4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${orgApacheLoggingLog4jVersion}"

    annotationProcessor "io.javaoperatorsdk:operator-framework:${javaOperatorVersion}"
    annotationProcessor "io.fabric8:crd-generator-apt:${fabric8Version}"

    implementation "io.javaoperatorsdk:operator-framework-junit-5:${javaOperatorVersion}"
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.register("copyJarToDockerBuild", Copy) {
    dependsOn jar
    from(layout.buildDirectory.dir("libs"))
    include("*.jar")
    into(layout.buildDirectory.dir("docker/libs"))
}
tasks.register("copyDockerfiles", Copy) {
    from(layout.projectDirectory.dir("docker"))
    include("*")
    into(layout.buildDirectory.dir("docker"))
}
tasks.register("copyDependenciesToDockerBuild", Copy) {
    from configurations.runtimeClasspath
    into(layout.buildDirectory.dir("docker/libs"))
}
tasks.register("docker", Exec) {
    String platform = "linux/arm64"
    if (project.hasProperty("dockerPlatform")) {
        platform = project.property("dockerPlatform")
    }
    dependsOn copyJarToDockerBuild, copyDockerfiles, copyDependenciesToDockerBuild
    workingDir = layout.buildDirectory
    executable = "/usr/local/bin/docker"
    args([
            "build",
            "-t${project.name}:${project.version}",
            "--platform=${platform}",
            "docker"
    ])
}
